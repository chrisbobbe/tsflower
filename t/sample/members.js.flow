/* @flow
 * @generated by TsFlower
 */
declare export var value: {
    property: string,
    +propertyRo: string,
    get getter(): number,
    set setter(value: number): void,
    method1(): void,
    method2(x: number): string,
    functionProperty: (x: number) => string,
    destructuringMethod({ x: number, ... }): void,
    "property keyed by StringLiteral": string,
    "method StringLiteral"(): void,
    "": number,
    "1": string,
    "20": string,
    "16": string,
    "26": string,
    "100": string,
    "1200": string,
    ...
};

declare export class C {
    constructor(): any,
    f(cb: (s: string) => void): void,
    g(other: this): this,
    +propertyRo: string,
    get getter(): number,
    set setter(value: number): void,
    x: any,
    y: this,
    z?: any,
    w?: number,
};

export interface I {
    f(cb: (s: string) => void): void,
    x: any,
    z?: any,
    w?: number,
    +propertyRo: string,
    get getter(): number,
    set setter(value: number): void,
};

declare var vIndexer: {
    [key: number]: string,
    plainProperty: number[],
    ...
};

declare class CIndexer {
    [key: number]: string,
    plainProperty: number[],
}

declare interface IIndexer {
    [key: number]: string,
    plainProperty: number[],
}
