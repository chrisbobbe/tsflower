/* @flow
 * @generated by TsFlower
 */
type Partial<T> = $Rest<T, { ... }>;
var readonly: { a: $ReadOnly<{ a: string, ... }>, ... };
var readonlyArray: { a: $ReadOnlyArray<number>, ... };

var partial: {
    a: Partial<{
        x: number,
        y?: string,
        ...
    }>,
    b: Partial<{...}>,
    ...
};

var record: {
    stringLiteral: { "a": number },
    numberLiteral: { "1": number },
    string: { [key: string]: number },
    number: { [key: number]: number },
    unionStrings: {
        "a": number,
        "b": number,
    },
    unionNumbers: {
        "1": number,
        "2": number,
        "3": number,
    },
    unionMixedAtoms: {
        "a": number,
        "2": number,
    },
    unionAtomAndCategory: $FlowFixMe/*  Record<'a' | number, number> *//* tsflower-unimplemented: Record with union member NumberKeyword */,
    unionCategories: $FlowFixMe/*  Record<string | number, number> *//* tsflower-unimplemented: Record with union member StringKeyword */,
    ...
};

var omit: {
    a: $Diff<{
        a: string,
        b: number,
        ...
    }, {| "a": mixed |}>,
    b: $Diff<{
        a: string,
        b: number,
        ...
    }, {|
        "a": mixed,
        "c": mixed,
    |}>,
    c: $Diff<{
        a: string,
        b: number,
        ...
    }, {| [key: empty]: mixed |}>,
    d: $Diff<{
        a: string,
        b: number,
        ...
    }, {|
        "12": mixed,
        "ðŸ˜€": mixed,
    |}>,
    ...
};

declare interface I extends $ReadOnlyArray<string> {}
