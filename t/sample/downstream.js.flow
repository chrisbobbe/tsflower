/* @flow
 * @generated by TsFlower
 */
import * as upstream from "./upstream";
import { type Num as Numm } from "./upstream";
import { x as ux } from "./upstream";
import upstream2 from "./upstream";
import { Component } from "../imported/upupstream";
export { x, x as uux } from "./upstream";
export { Num } from "./upstream";
export { Num as Nummm } from "./upstream";
export * from "./upstream";
export type NumArray = Array<upstream.Num>;
export type RONumArray = $ReadOnlyArray<Numm>;
type ArrayArray<T, S: T> = [S, T[]][];
var a: void, b: void, c: boolean, d: number, e: string;
var f: null, g: true, h: false, i: 3, j: "x";
var k: boolean[], l: "a" | 3;
var m: (x: string, y: any, ...b: boolean[]) => number;
var n: (a: string, b?: number) => void;
var nn: <T>(x: T) => T[];

var o: {|
    a: number,
    b: {...},
    c: mixed,
    d: any,
    e: empty,
    f: <T>(x: T) => T[],
    g: $ElementType<{| a: string |}, "a">,
    h: $Diff<{|
        a: string,
        b: number,
    |}, {| "a": mixed |}>,
    i: $Diff<{|
        a: string,
        b: number,
    |}, {|
        "a": mixed,
        "c": mixed,
    |}>,
    j: $Diff<{|
        a: string,
        b: number,
    |}, {| [key: empty]: mixed |}>,
    k: $Diff<{|
        a: string,
        b: number,
    |}, {|
        "12": mixed,
        "ðŸ˜€": mixed,
    |}>,
|};

declare function ff<T>(x: T): {| y: T |};
declare function ff(x: boolean): (b: true) => {| y: number |};
declare interface I {}
declare export class C<T> {};

declare export class D extends C<string> {
    x: any,
    y: string,
    z?: any,
    w?: number,
};

export {};
export { ff as fff, C as CC };
