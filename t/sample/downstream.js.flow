/* @flow
 * @generated by TsFlower
 */
import typeof * as $tsflower_import_typeof$_$_2e__2f_upstream from "./upstream";
import type { Num as $tsflower_import_type$_$_2e__2f_upstream$Num } from "./upstream";
import type { ArrayArray as $tsflower_import_type$_$_2e__2f_upstream$ArrayArray } from "./upstream";
import type { ArrayArray2 as $tsflower_import_type$_$_2e__2f_upstream$ArrayArray2 } from "./upstream";
import * as upstream from "./upstream";
import { type Num } from "./upstream";
import { type Num as Numm } from "./upstream";
import { x as ux } from "./upstream";
import upstream2 from "./upstream";
import * as upstreamTypeOnly from "./upstream";
import { C as UpC, type C as UpCT } from "./upstream";
import { type C as UpCTT } from "./upstream";
import { Component } from "../imported/minireact";
export { x, x as uux } from "./upstream";
export { Num } from "./upstream";
export { Num as Nummm } from "./upstream";
export * from "./upstream";
export type NumArray = Array<upstream.Num>;

declare var importType: {
    whole: $tsflower_import_typeof$_$_2e__2f_upstream,
    value: $ElementType<$tsflower_import_typeof$_$_2e__2f_upstream, "x">,
    subvalue: $ElementType<$ElementType<$ElementType<$tsflower_import_typeof$_$_2e__2f_upstream, "xx">, "y">, "z">,
    type: $tsflower_import_type$_$_2e__2f_upstream$Num,
    typeArgs: $tsflower_import_type$_$_2e__2f_upstream$ArrayArray<number>,
    typeDefaultArgs: $tsflower_import_type$_$_2e__2f_upstream$ArrayArray2<>,
    ...
};

type TupleArray<T, S: T> = [S, T[]][];
declare export var xx: 3;
declare export var y: "a";
declare export var z: string;
declare export class C<T> {};
declare function ff(x: boolean): void;
export {};
export { ff as fff, C as CC };
