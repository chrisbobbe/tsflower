/* @flow
 * @generated by TsFlower
 */
import type {
    ComponentProps as $tsflower_subst$React$ComponentProps,
    PropsWithChildren as $tsflower_subst$React$PropsWithChildren,
    PropsWithoutRef as $tsflower_subst$React$PropsWithoutRef,
    FunctionComponent as $tsflower_subst$React$FunctionComponent,
    MemoExoticComponent as $tsflower_subst$React$MemoExoticComponent,
    NamedExoticComponent as $tsflower_subst$React$NamedExoticComponent,
    ReactNode as $tsflower_subst$React$ReactNode,
    MutableRefObject as $tsflower_subst$React$MutableRefObject,
    RefObject as $tsflower_subst$React$RefObject,
    Ref as $tsflower_subst$React$Ref,
    RefAttributes as $tsflower_subst$React$RefAttributes,
    ForwardRefExoticComponent as $tsflower_subst$React$ForwardRefExoticComponent,
    ProviderProps as $tsflower_subst$React$ProviderProps,
    ConsumerProps as $tsflower_subst$React$ConsumerProps,
    Provider as $tsflower_subst$React$Provider,
    Consumer as $tsflower_subst$React$Consumer,
    Context as $tsflower_subst$React$Context,
    JSX$Element as $tsflower_subst$React$JSX$Element,
} from "tsflower/subst/react";

import { Component, Component as Component2 } from "react";
import React2 from "react";
import * as React from "react";

var reactComponent: {
    a: Component<{...}>,
    b: React.Component<{...}>,
    b: React2.Component<{...}>,
    ...
};

declare class ReactComponentTest extends Component2<{...}> {}
declare class ReactComponentTest extends React.Component<{...}> {}
declare class ReactComponentTest extends React2.Component<{...}> {}

type AProps = {
    x: number,
    y: string,
    ...
};

declare class A extends Component<AProps> {}
declare class AA extends React.Component<AProps> {}
declare class AAA extends React2.Component<AProps> {}

var reactElement: {
    a2: React$Element<React$ElementType>,
    a3: React$Element<React$ElementType>,
    b2: React$Element<React$ComponentType<AProps>>,
    b3: React$Element<React$ComponentType<AProps>>,
    c2: React$Element<"div">,
    c3: React$Element<"div">,
    ...
};

var componentProps: { a: $tsflower_subst$React$ComponentProps<A>, ... };

var propsManipulation: {
    propsWithChildren: $tsflower_subst$React$PropsWithChildren<{ x: number, ... }>,
    propsWithoutRef1: $tsflower_subst$React$PropsWithoutRef<{
        x: number,
        ref: string,
        ...
    }>,
    propsWithoutRef2: $tsflower_subst$React$PropsWithoutRef<{ x: number, ... }>,
    propsWithoutRef3: $tsflower_subst$React$PropsWithoutRef<{
        x: number,
        ref: string,
        ...
    } | { y: number, ... }>,
    ...
};

var miscComponents: {
    functional0: $tsflower_subst$React$FunctionComponent<>,
    functional1: $tsflower_subst$React$FunctionComponent<{ x: number, ... }>,
    memo: $tsflower_subst$React$MemoExoticComponent<A>,
    named: $tsflower_subst$React$NamedExoticComponent<{...}>,
    ...
};

var reactNode: $tsflower_subst$React$ReactNode;

var ref: {
    mutableRefObject: $tsflower_subst$React$MutableRefObject<number>,
    refObject: $tsflower_subst$React$RefObject<number>,
    ref: $tsflower_subst$React$Ref<number>,
    ref2: $tsflower_subst$React$Ref<React.Component<{...}>>,
    refAttributes: $tsflower_subst$React$RefAttributes<React.Component<{...}>>,
    forwardRefExoticComponent: $tsflower_subst$React$ForwardRefExoticComponent<{ x: string, ... } & $tsflower_subst$React$RefAttributes<React.Component<{...}>>>,
    ...
};

var context: {
    providerProps: $tsflower_subst$React$ProviderProps<string>,
    consumerProps: $tsflower_subst$React$ConsumerProps<string>,
    provider: $tsflower_subst$React$Provider<string>,
    consumer: $tsflower_subst$React$Consumer<string>,
    context: $tsflower_subst$React$Context<string>,
    ...
};

var jsx: { element: $tsflower_subst$React$JSX$Element, ... };
