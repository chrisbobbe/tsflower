/* @flow
 * @generated by TsFlower
 */
type $tsflower_subst$React$Nop<+T> = T;
type $tsflower_subst$React$RefObject<T> = { +current: T | null, ... };
type $tsflower_subst$React$RefCallback<T> = (T | null) => mixed;
type $tsflower_subst$React$Ref<T> = $tsflower_subst$React$RefCallback<T> | $tsflower_subst$React$RefObject<T> | null;
type $tsflower_subst$React$RefAttributes<T> = {
  key?: string | number | void | null,
  ref?: void | $tsflower_subst$React$Ref<T>,
  ...
}
import React, { Component, Component as Component2 } from "react";
import * as React2 from "react";

var reactComponent: {
    a: Component<{...}>,
    b: React.Component<{...}>,
    b: React2.Component<{...}>,
    ...
};

declare class ReactComponentTest extends Component2<{...}> {}
declare class ReactComponentTest extends React.Component<{...}> {}
declare class ReactComponentTest extends React2.Component<{...}> {}

type AProps = {
    x: number,
    y: string,
    ...
};

declare class A extends Component<AProps> {}
declare class AA extends React.Component<AProps> {}
declare class AAA extends React2.Component<AProps> {}

var reactElement: {
    a2: React$Element<React$ElementType>,
    a3: React$Element<React$ElementType>,
    b2: React$Element<React$ComponentType<AProps>>,
    b3: React$Element<React$ComponentType<AProps>>,
    c2: React$Element<"div">,
    c3: React$Element<"div">,
    ...
};

var componentProps: { a: React$ElementConfig<A>, ... };

var miscComponents: {
    functional0: React$StatelessFunctionalComponent<{...}>,
    functional1: React$StatelessFunctionalComponent<{ x: number, ... }>,
    memo: $tsflower_subst$React$Nop<A>,
    named: React$ComponentType<{...}>,
    ...
};

var reactNode: React$Node;

var ref: {
    refObject: $tsflower_subst$React$RefObject<number>,
    ref: $tsflower_subst$React$Ref<number>,
    ref2: $tsflower_subst$React$Ref<React.Component<{...}>>,
    refAttributes: $tsflower_subst$React$RefAttributes<React.Component<{...}>>,
    forwardRefExoticComponent: React$ComponentType<{ x: string, ... } & $tsflower_subst$React$RefAttributes<React.Component<{...}>>>,
    ...
};

var jsx: { element: React$Element<any>, ... };
