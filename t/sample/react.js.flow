/* @flow
 * @generated by TsFlower
 */
import { type PropsWithChildren as $tsflower_subst$React$PropsWithChildren } from "tsflower/subst/react";
import { type PropsWithoutRef as $tsflower_subst$React$PropsWithoutRef } from "tsflower/subst/react";
type $tsflower_subst$React$Nop<+T> = T;
import { type MutableRefObject as $tsflower_subst$React$MutableRefObject } from "tsflower/subst/react";
import { type RefObject as $tsflower_subst$React$RefObject } from "tsflower/subst/react";
import { type Ref as $tsflower_subst$React$Ref } from "tsflower/subst/react";
import { type RefAttributes as $tsflower_subst$React$RefAttributes } from "tsflower/subst/react";
import { type ProviderProps as $tsflower_subst$React$ProviderProps } from "tsflower/subst/react";
import { type ConsumerProps as $tsflower_subst$React$ConsumerProps } from "tsflower/subst/react";
import { type Provider as $tsflower_subst$React$Provider } from "tsflower/subst/react";
import { type Consumer as $tsflower_subst$React$Consumer } from "tsflower/subst/react";
import React, { Component, Component as Component2 } from "react";
import * as React2 from "react";

var reactComponent: {
    a: Component<{...}>,
    b: React.Component<{...}>,
    b: React2.Component<{...}>,
    ...
};

declare class ReactComponentTest extends Component2<{...}> {}
declare class ReactComponentTest extends React.Component<{...}> {}
declare class ReactComponentTest extends React2.Component<{...}> {}

type AProps = {
    x: number,
    y: string,
    ...
};

declare class A extends Component<AProps> {}
declare class AA extends React.Component<AProps> {}
declare class AAA extends React2.Component<AProps> {}

var reactElement: {
    a2: React$Element<React$ElementType>,
    a3: React$Element<React$ElementType>,
    b2: React$Element<React$ComponentType<AProps>>,
    b3: React$Element<React$ComponentType<AProps>>,
    c2: React$Element<"div">,
    c3: React$Element<"div">,
    ...
};

var componentProps: { a: React$ElementConfig<A>, ... };

var propsManipulation: {
    propsWithChildren: $tsflower_subst$React$PropsWithChildren<{ x: number, ... }>,
    propsWithoutRef1: $tsflower_subst$React$PropsWithoutRef<{
        x: number,
        ref: string,
        ...
    }>,
    propsWithoutRef2: $tsflower_subst$React$PropsWithoutRef<{ x: number, ... }>,
    propsWithoutRef3: $tsflower_subst$React$PropsWithoutRef<{
        x: number,
        ref: string,
        ...
    } | { y: number, ... }>,
    ...
};

var miscComponents: {
    functional0: React$StatelessFunctionalComponent<{...}>,
    functional1: React$StatelessFunctionalComponent<{ x: number, ... }>,
    memo: $tsflower_subst$React$Nop<A>,
    named: React$ComponentType<{...}>,
    ...
};

var reactNode: React$Node;

var ref: {
    mutableRefObject: $tsflower_subst$React$MutableRefObject<number>,
    refObject: $tsflower_subst$React$RefObject<number>,
    ref: $tsflower_subst$React$Ref<number>,
    ref2: $tsflower_subst$React$Ref<React.Component<{...}>>,
    refAttributes: $tsflower_subst$React$RefAttributes<React.Component<{...}>>,
    forwardRefExoticComponent: React$ComponentType<{ x: string, ... } & $tsflower_subst$React$RefAttributes<React.Component<{...}>>>,
    ...
};

var context: {
    providerProps: $tsflower_subst$React$ProviderProps<string>,
    consumerProps: $tsflower_subst$React$ConsumerProps<string>,
    provider: $tsflower_subst$React$Provider<string>,
    consumer: $tsflower_subst$React$Consumer<string>,
    context: React$Context<string>,
    ...
};

var jsx: { element: React$Element<any>, ... };
