/**
 * Flow type definitions corresponding to the TS definitions in `@types/react`.
 *
 * TsFlower will rewrite some TS references to React types so that their
 * Flow versions refer instead to these types.
 *
 * @flow
 */

import * as React from 'react';

//
// Principles of this file:
//
//  * Everything appears in the same order as in @types/react/index.d.ts.
//    This helps make it easy to compare when filling in more definitions.
//
//  * Every definition in this file should have a test case in `t/sample/`,
//    even if it's just a trivial one.
//
//  * Where possible, define things directly in terms of Flow's React types
//    (the types flowlib provides for `import … from 'react'`.)
//
//  * Even when Flow doesn't export a name for the same piece of the API
//    described by some @types/react type, try to write a definition that
//    aligns with Flow's React types.
//
//    In other words, try to write down flowlib's description of the same
//    piece of the React API, even if that differs slightly from the type
//    found in @types/react.  It's more important to have types that can be
//    used smoothly with React than to match the nuances of how @types/react
//    describes React.
//
//    (After all, the Flow and TS types are two independent efforts at
//    describing the same underlying reality, the React API.  They've made
//    different choices in the details; at different times one may be a more
//    accurate model than the other, or vice versa, or neither.  In any TS
//    type definitions that TsFlower is translating for some library that
//    uses React, the references to React types are presumably intended most
//    of all to refer to React as it really is, and/or as other React-using
//    code will understand it to be, not to any quirks @types/react may have
//    in how it's chosen to describe it.)
//

// Definition in @types/react/index.d.ts:
//   interface RefObject<T> {
//     readonly current: T | null;
//   }
//   // Bivariance hack for consistent unsoundness with RefObject
//   type RefCallback<T> = { bivarianceHack(instance: T | null): void }["bivarianceHack"];
//   type Ref<T> = RefCallback<T> | RefObject<T> | null;
//
// There's no definition in flowlib's react.js that corresponds; the types
// of `useImperativeHandle` and `forwardRef` spell it out.  There's
// `React.Ref`, but it's the type of the `ref` pseudoprop; its type
// parameter is the ElementType of the element, and it passes that to
// `React$ElementRef` to work out what type the ref should hold.
//
// So, just give definitions of our own.
export type RefObject<T> = { +current: T | null, ... };
export type RefCallback<T> = (T | null) => mixed;
// NB mixed return, not void; see e.g. flowlib's React$Ref
export type Ref<T> = RefCallback<T> | RefObject<T> | null;

// Definition in @types/react/index.d.ts:
//   type Key = string | number;
//   interface Attributes {
//     key?: Key | null | undefined;
//   }
//   interface RefAttributes<T> extends Attributes {
//     ref?: Ref<T> | undefined;
//   }
export type RefAttributes<T> = {
  key?: string | number | void | null,
  ref?: void | Ref<T>,
  ...
};

// export type ReactElement = …  // We translate this as a macro.

// type ReactNode = ReactElement | string | number | …
export type ReactNode = React.Node;

// @types/react/index.d.ts (whitespace and comments elided):
//   interface ProviderProps<T> {
//       value: T;
//       children?: ReactNode | undefined;
//   }
//   interface ConsumerProps<T> {
//       children: (value: T) => ReactNode;
//   }
//   // …
//   type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;
//   type Consumer<T> = ExoticComponent<ConsumerProps<T>>;
//   interface Context<T> {
//       Provider: Provider<T>;
//       Consumer: Consumer<T>;
//       displayName?: string | undefined;
//   }
// and then createContext on a T returns a Context<T>.
//
// In flowlib, most of those pieces don't get names.  But there is a
// React.Context with the same meaning.
export type ProviderProps<T> = React$ElementConfig<Provider<T>>;
export type ConsumerProps<T> = React$ElementConfig<Consumer<T>>;
// (For Provider, Consumer, and Context, see below, following the `@types/react` order.)

// NamedExoticComponent is the base interface of ForwardRefExoticComponent.
// See there.
export type NamedExoticComponent<-P> = React.ComponentType<P>;

// For background on Provider, Consumer, and Context, see ProviderProps above.
export type Provider<T> = $ElementType<Context<T>, 'Provider'>;
export type Consumer<T> = $ElementType<Context<T>, 'Consumer'>;
export type Context<T> = React.Context<T>;

// export type Component<P, S> = …  // We translate this as a macro.

// @types/react:
//   interface FunctionComponent<P = {}> {
// flowlib:
//   declare type React$StatelessFunctionalComponent<Props> = {
// So we need to fill in that default for the type argument.
export type FunctionComponent<P = { ... }> =
  React.StatelessFunctionalComponent<P>;

// The `@types/react` definition of ForwardRefExoticComponent has
// various hair on it, but ultimately its job is to model the return
// type of React.forwardRef.  In flowlib, that returns a certain
// React$AbstractComponent.  The second ("Instance") type parameter
// seems hard to recover, so just approximate it as `mixed`… and that's
// what React$ComponentType does.
export type ForwardRefExoticComponent<-P> = React.ComponentType<P>;

// In @types/react:
//   /** Ensures that the props do not include ref at all */
//   type PropsWithoutRef<P> = …
// The definition is complicated for reasons that seem TS-specific.
// Make it easy with Flow's `$Rest`.
export type PropsWithoutRef<P> = $Rest<P, {| ref: mixed |}>;

// In @types/react:
//   type PropsWithChildren<P> = P & { children?: ReactNode | undefined };
export type PropsWithChildren<+P> = { ...P, children?: React$Node | void, ... };

export type ComponentProps<C> = React.ElementConfig<C>;

// Similarly to ForwardRefExoticComponent for React.forwardRef,
// MemoExoticComponent models the return type of React.memo.  Here the type
// argument is actually the component type (the type of the function's first
// argument), not the props.  In flowlib, the argument and return types are
// the same; so it's the identity.
export type MemoExoticComponent<+T> = T;

// In @types/react:
//   interface MutableRefObject<T> { current: T; }
export type MutableRefObject<T> = { current: T, ... };

//   // @types/react/index.d.ts
//   declare global {
//     namespace JSX {
//         interface Element extends React.ReactElement<any, any> { }
// Currently we handle React.ReactElement with a macro;
// do here what that macro would give on `any, any`.
export type JSX$Element = React$Element<any>;
