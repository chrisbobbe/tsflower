/**
 * Flow types corresponding to types in the TS default library / stdlib.
 *
 * TsFlower will rewrite some TS references to these types into Flow
 * references to these types.
 *
 * @flow
 */

export type Readonly<+T> = $ReadOnly<T>;

export type { $ReadOnlyArray as ReadonlyArray };

// From lib.es5.d.ts:
//   type Partial<T> = { [P in keyof T]?: T[P]; };
export type Partial<T> = $Rest<T, { ... }>;

// From lib.es5.d.ts, `interface PromiseLike<T>` is just like `Promise`,
// but with only `then` and no `catch` or `finally` etc; and with `then`
// returning another PromiseLike.
//
// Then the way that's used is that the callback arguments to `then` -- both
// versions of it -- as well as to some other things like `Promise.any` and
// some Node methods, are only required to provide a `T | PromiseLike<T>`,
// not `T | Promise<T>`.
//
// In flowlib, `then` and `Promise.allSettled` take `T | Promise<T>`.  So
// just alias PromiseLike to Promise.
export type { Promise as PromiseLike };

// The actual definition of Extract is rather like this except it's
// "distributive" over unions, and all-or-nothing for each union member.
// But so far, uses of it in practice seem to be all `Extract<Foo, string>`
// (moreover where Foo is either `keyof Bar` or something that's basically
// expected to be of that form.)  I think when the second type argument is
// `string`, that may actually just be equivalent to this intersection.
export type Extract<+T, +U> = T & U;
