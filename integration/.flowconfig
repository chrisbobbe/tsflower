[ignore]
; https://github.com/facebook/flow/issues/2364
.*/node_modules/resolve/test/resolver/malformed_package_json/.*

[include]
# These go with the `tsflower` and `react-native` module.name_mapper lines
# below, respectively.
../subst/
../node_modules/react-native/

[options]

# This causes Flow to find our `types/foo/bar.js.flow`, if one exists,
# when looking at an import from `foo/bar`.  (The `[^.]` is so Flow doesn't
# try to apply this to relative imports.)
module.name_mapper='^\([^.].*\)$' -> '<PROJECT_ROOT>/types/\0'

# A normal TsFlower-using project, with `tsflower` in its node_modules,
# doesn't need this.  But we need it here because we want to find a module
# like 'tsflower/subst/react' from the development version in this repo.
module.name_mapper='^tsflower/\(.*\)$' -> '<PROJECT_ROOT>/../\1'

# Similarly, a normal TsFlower-using project that has dependencies referring
# to `react-native` will already have Flow set up to resolve references to
# `react-native` and `react-native/â€¦`, and won't need to add any lines like
# these.  (Typically such a project will in fact already have a version of
# these lines, from the RN template app's flowconfig.)
#
# The RN template app has:
# module.name_mapper='^react-native/\(.*\)$' -> '<PROJECT_ROOT>/node_modules/react-native/\1'
# We make that:
module.name_mapper='^react-native/\(.*\)$' -> '<PROJECT_ROOT>/../node_modules/react-native/\1'
# and add:
module.name_mapper='^react-native$' -> '<PROJECT_ROOT>/../node_modules/react-native'
